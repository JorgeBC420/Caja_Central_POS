"""
Launcher inteligente para el Bot de WhatsApp
Prueba diferentes versiones hasta encontrar una que funcione
"""

import subprocess
import sys
import os
import time
from pathlib import Path

def test_selenium():
    """Prueba si Selenium funciona correctamente"""
    print("üß™ Probando Selenium...")
    
    try:
        from selenium import webdriver
        from selenium.webdriver.chrome.options import Options
        from webdriver_manager.chrome import ChromeDriverManager
        from selenium.webdriver.chrome.service import Service
        
        options = Options()
        options.add_argument("--headless")
        options.add_argument("--no-sandbox")
        options.add_argument("--disable-dev-shm-usage")
        
        service = Service(ChromeDriverManager().install())
        driver = webdriver.Chrome(service=service, options=options)
        driver.get("https://www.google.com")
        
        success = "Google" in driver.title
        driver.quit()
        
        if success:
            print("‚úÖ Selenium funcionando correctamente")
            return True
        else:
            print("‚ùå Selenium con problemas")
            return False
            
    except Exception as e:
        print(f"‚ùå Selenium fall√≥: {e}")
        return False

def test_ai_assistant():
    """Prueba si el AI Assistant funciona"""
    print("üß™ Probando AI Assistant...")
    
    try:
        from core.ai_assistant import POSAIAssistant
        from core.database import DatabaseManager
        
        db = DatabaseManager()
        ai = POSAIAssistant(db)
        
        response = ai.ask("test")
        
        if response and response.get('answer'):
            engines = ai.get_engine_status()['active_engines']
            print(f"‚úÖ AI Assistant OK - Engines: {engines}")
            return True
        else:
            print("‚ö†Ô∏è AI Assistant limitado")
            return True  # A√∫n funciona, solo limitado
            
    except Exception as e:
        print(f"‚ùå AI Assistant fall√≥: {e}")
        return False

def check_chrome():
    """Verifica Chrome instalado"""
    print("üß™ Verificando Chrome...")
    
    chrome_paths = [
        "C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe",
        "C:\\Program Files (x86)\\Google\\Chrome\\Application\\chrome.exe"
    ]
    
    for path in chrome_paths:
        if os.path.exists(path):
            print(f"‚úÖ Chrome encontrado: {path}")
            return True
    
    print("‚ùå Chrome no encontrado")
    return False

def launch_bot_version(script_name, description):
    """Lanza una versi√≥n espec√≠fica del bot"""
    print(f"\nüöÄ Iniciando {description}...")
    print("=" * 50)
    
    try:
        # Ejecutar el script
        result = subprocess.run([sys.executable, script_name], 
                              capture_output=False, 
                              text=True)
        return result.returncode == 0
    except Exception as e:
        print(f"‚ùå Error ejecutando {script_name}: {e}")
        return False

def show_menu():
    """Muestra men√∫ de opciones"""
    print("\nüìã OPCIONES DISPONIBLES")
    print("=" * 30)
    print("1Ô∏è‚É£ Bot Estable (Recomendado)")
    print("2Ô∏è‚É£ Bot Original (Completo)")
    print("3Ô∏è‚É£ Bot Alternativo (Experimental)")
    print("4Ô∏è‚É£ Configurar dependencias")
    print("5Ô∏è‚É£ Diagn√≥stico completo")
    print("6Ô∏è‚É£ Abrir Chrome manualmente")
    print("7Ô∏è‚É£ Forzar Chrome (cerrar Edge)")
    print("0Ô∏è‚É£ Salir")
    print()

def run_diagnostics():
    """Ejecuta diagn√≥stico completo del sistema"""
    print("\nüîç DIAGN√ìSTICO COMPLETO")
    print("=" * 30)
    
    results = {
        "Chrome": check_chrome(),
        "Selenium": test_selenium(),
        "AI Assistant": test_ai_assistant()
    }
    
    print("\nüìä RESULTADOS:")
    for component, status in results.items():
        status_icon = "‚úÖ" if status else "‚ùå"
        print(f"{status_icon} {component}")
    
    print("\nüí° RECOMENDACIONES:")
    
    if all(results.values()):
        print("üéâ Todo funciona perfectamente!")
        print("üöÄ Usa cualquier versi√≥n del bot")
    elif results["Chrome"] and results["AI Assistant"]:
        if not results["Selenium"]:
            print("‚ö†Ô∏è Selenium con problemas")
            print("üîß Usa Bot Estable o Alternativo")
        else:
            print("‚úÖ Sistema en buen estado")
    else:
        print("üö® Problemas detectados:")
        if not results["Chrome"]:
            print("   - Instala Google Chrome")
        if not results["AI Assistant"]:
            print("   - Revisa configuraci√≥n de base de datos")
        if not results["Selenium"]:
            print("   - Reinstala dependencias de Selenium")

def setup_dependencies():
    """Configura dependencias autom√°ticamente"""
    print("\nüì¶ CONFIGURANDO DEPENDENCIAS")
    print("=" * 35)
    
    dependencies = [
        "selenium>=4.15.0",
        "webdriver-manager>=4.0.0",
        "pyautogui",
        "opencv-python",
        "psutil"
    ]
    
    for dep in dependencies:
        try:
            print(f"‚¨áÔ∏è Instalando {dep}...")
            subprocess.check_call([sys.executable, "-m", "pip", "install", dep])
            print(f"‚úÖ {dep} instalado")
        except subprocess.CalledProcessError:
            print(f"‚ùå Error instalando {dep}")
    
    print("\n‚úÖ Configuraci√≥n completada")

def abrir_chrome_manual():
    """Abre Chrome manualmente para WhatsApp Web"""
    print("\nüåê ABRIR CHROME MANUALMENTE")
    print("=" * 35)
    
    try:
        from chrome_utils import emergency_chrome_launch
        emergency_chrome_launch()
    except ImportError:
        # Fallback si no est√° disponible chrome_utils
        print("‚ö†Ô∏è Utilidades de Chrome no disponibles")
        print("üîß Abriendo Chrome b√°sico...")
        
        import webbrowser
        webbrowser.register('chrome', None, webbrowser.BackgroundBrowser("C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe"))
        webbrowser.get('chrome').open("https://web.whatsapp.com")
        print("‚úÖ Chrome abierto. Ve a WhatsApp Web y escanea el QR")

def forzar_chrome():
    """Fuerza el uso de Chrome cerrando Edge"""
    print("\nüîß FORZAR CHROME (CERRAR EDGE)")
    print("=" * 35)
    
    try:
        from chrome_utils import prepare_chrome_environment
        if prepare_chrome_environment():
            print("‚úÖ Entorno preparado para Chrome")
            print("üí° Ahora puedes intentar ejecutar el bot")
        else:
            print("‚ö†Ô∏è Algunos pasos fallaron, pero puedes intentar continuar")
    except ImportError:
        print("‚ö†Ô∏è Utilidades de Chrome no disponibles")
        print("üîß Cerrando Edge manualmente...")
        
        import psutil
        edge_closed = False
        for proc in psutil.process_iter(['pid', 'name']):
            try:
                if proc.info['name'] and 'edge' in proc.info['name'].lower():
                    print(f"üö´ Cerrando: {proc.info['name']}")
                    proc.terminate()
                    edge_closed = True
            except:
                pass
        
        if edge_closed:
            print("‚úÖ Procesos de Edge cerrados")
        else:
            print("‚ÑπÔ∏è No se encontraron procesos de Edge ejecut√°ndose")

    print("\n‚úÖ Configuraci√≥n completada")

def get_best_bot_version():
    """Determina autom√°ticamente la mejor versi√≥n"""
    print("ü§ñ Determinando mejor versi√≥n del bot...")
    
    chrome_ok = check_chrome()
    selenium_ok = test_selenium()
    ai_ok = test_ai_assistant()
    
    if selenium_ok and chrome_ok and ai_ok:
        return "whatsapp_bot_simple.py", "Bot Original (Todas las funcionalidades)"
    elif chrome_ok and ai_ok:
        return "whatsapp_bot_stable.py", "Bot Estable (Configuraci√≥n m√≠nima)"
    elif chrome_ok:
        return "whatsapp_bot_alternative.py", "Bot Alternativo (PyAutoGUI)"
    else:
        return None, "No se puede ejecutar ning√∫n bot"

def main():
    """Funci√≥n principal del launcher"""
    print("ü§ñ LAUNCHER BOT WHATSAPP - CajaCentral POS")
    print("=" * 45)
    print("Seleccionando autom√°ticamente la mejor versi√≥n...")
    
    # Diagn√≥stico r√°pido
    bot_script, bot_description = get_best_bot_version()
    
    if bot_script:
        print(f"\nüéØ Versi√≥n recomendada: {bot_description}")
        
        while True:
            show_menu()
            
            try:
                choice = input("Selecciona una opci√≥n (1-7, 0 para salir): ").strip()
                
                if choice == "0":
                    print("üëã ¬°Hasta luego!")
                    break
                elif choice == "1":
                    launch_bot_version("whatsapp_bot_stable.py", "Bot Estable")
                elif choice == "2":
                    launch_bot_version("whatsapp_bot_simple.py", "Bot Original")
                elif choice == "3":
                    launch_bot_version("whatsapp_bot_alternative.py", "Bot Alternativo")
                elif choice == "4":
                    setup_dependencies()
                elif choice == "5":
                    run_diagnostics()
                elif choice == "6":
                    abrir_chrome_manual()
                elif choice == "7":
                    forzar_chrome()
                else:
                    print("‚ùå Opci√≥n inv√°lida")
                
                if choice in ["1", "2", "3"]:
                    # Preguntar si quiere reintentar
                    retry = input("\n¬øQuieres probar otra versi√≥n? (s/n): ").lower()
                    if retry not in ['s', 'si', 's√≠', 'y', 'yes']:
                        break
                
            except KeyboardInterrupt:
                print("\nüëã ¬°Hasta luego!")
                break
            except Exception as e:
                print(f"‚ùå Error: {e}")
    
    else:
        print("‚ùå No se puede ejecutar el bot. Ejecuta diagn√≥stico completo.")
        run_diagnostics()

if __name__ == "__main__":
    main()
