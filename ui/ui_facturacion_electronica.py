"""
Integraci√≥n de Facturaci√≥n Electr√≥nica con el Sistema POS
M√≥dulo para conectar las ventas con la generaci√≥n autom√°tica de facturas electr√≥nicas
"""

import tkinter as tk
from tkinter import ttk, messagebox, filedialog
import os
i        # Bot√≥n generar factura
        generate_btn = tk.Button(actions_frame, text="üìÑ Generar Factura Electr√≥nica", 
                                command=self.generate_electronic_invoice,
                                font=('Segoe UI', 12, 'bold'), bg='#27ae60', fg='white',
                                relief=tk.FLAT, padx=30, pady=12, cursor='hand2')
        generate_btn.pack(side=tk.LEFT, padx=(0, 10))
        
        # Bot√≥n PDF v4.4
        pdf_v44_btn = tk.Button(actions_frame, text="üìã Exportar PDF v4.4", 
                               command=self.export_pdf_v44,
                               font=('Segoe UI', 12, 'bold'), bg='#e74c3c', fg='white',
                               relief=tk.FLAT, padx=30, pady=12, cursor='hand2')
        pdf_v44_btn.pack(side=tk.LEFT, padx=(0, 10))
        
        # Bot√≥n vista previa
        preview_btn = tk.Button(actions_frame, text="üëÅÔ∏è Vista Previa PDF", 
                               command=self.preview_pdf,
                               font=('Segoe UI', 11), bg='#3498db', fg='white',
                               relief=tk.FLAT, padx=20, pady=12, cursor='hand2')
        preview_btn.pack(side=tk.LEFT, padx=(0, 10))rom datetime import datetime
import threading
from typing import Dict, List, Optional
import webbrowser

# Importar el m√≥dulo de facturaci√≥n electr√≥nica
try:
    from modules.invoicing.facturacion_electronica_cr import FacturacionElectronicaCR
    FACTURACION_AVAILABLE = True
except ImportError:
    FACTURACION_AVAILABLE = False
    print("M√≥dulo de facturaci√≥n electr√≥nica no disponible")

class FacturacionElectronicaUI:
    """Interfaz para gesti√≥n de facturaci√≥n electr√≥nica"""
    
    def __init__(self, parent_window, venta_data: Dict = None):
        self.parent = parent_window
        self.venta_data = venta_data or {}
        self.facturacion_system = None
        
        if FACTURACION_AVAILABLE:
            self.facturacion_system = FacturacionElectronicaCR()
        
        self.create_window()
    
    def create_window(self):
        """Crea la ventana de facturaci√≥n electr√≥nica"""
        self.window = tk.Toplevel(self.parent)
        self.window.title("üíª Facturaci√≥n Electr√≥nica - Costa Rica")
        self.window.geometry("900x700")
        self.window.resizable(True, True)
        self.window.transient(self.parent)
        self.window.grab_set()
        
        # Centrar ventana
        self.center_window()
        
        # Configurar estilo
        self.window.configure(bg='#f8f9fa')
        
        # Crear interfaz
        self.create_interface()
    
    def center_window(self):
        """Centra la ventana en la pantalla"""
        self.window.update_idletasks()
        width = self.window.winfo_width()
        height = self.window.winfo_height()
        x = (self.window.winfo_screenwidth() // 2) - (width // 2)
        y = (self.window.winfo_screenheight() // 2) - (height // 2)
        self.window.geometry(f"{width}x{height}+{x}+{y}")
    
    def create_interface(self):
        """Crea la interfaz principal"""
        # Header
        self.create_header()
        
        # Notebook para pesta√±as
        self.notebook = ttk.Notebook(self.window)
        self.notebook.pack(fill=tk.BOTH, expand=True, padx=15, pady=10)
        
        # Pesta√±a de generaci√≥n
        self.create_generation_tab()
        
        # Pesta√±a de configuraci√≥n
        self.create_config_tab()
        
        # Pesta√±a de historial
        self.create_history_tab()
        
        # Pesta√±a de ayuda
        self.create_help_tab()
    
    def create_header(self):
        """Crea el header de la ventana"""
        header_frame = tk.Frame(self.window, bg='#2c3e50', height=80)
        header_frame.pack(fill=tk.X)
        header_frame.pack_propagate(False)
        
        header_content = tk.Frame(header_frame, bg='#2c3e50')
        header_content.pack(expand=True, fill=tk.BOTH, padx=20, pady=15)
        
        # T√≠tulo
        title_label = tk.Label(header_content, text="üßæ Facturaci√≥n Electr√≥nica Costa Rica", 
                              font=('Segoe UI', 16, 'bold'), fg='white', bg='#2c3e50')
        title_label.pack(side=tk.LEFT)
        
        # Estado del sistema
        status_frame = tk.Frame(header_content, bg='#2c3e50')
        status_frame.pack(side=tk.RIGHT)
        
        if FACTURACION_AVAILABLE:
            status_text = "üü¢ Sistema Activo"
            status_color = '#27ae60'
        else:
            status_text = "üî¥ No Disponible"
            status_color = '#e74c3c'
        
        status_label = tk.Label(status_frame, text=status_text, 
                               font=('Segoe UI', 10, 'bold'), fg=status_color, bg='#2c3e50')
        status_label.pack()
        
        version_label = tk.Label(status_frame, text="Versi√≥n XML 4.4", 
                                font=('Segoe UI', 9), fg='#bdc3c7', bg='#2c3e50')
        version_label.pack()
    
    def create_generation_tab(self):
        """Pesta√±a de generaci√≥n de facturas"""
        gen_frame = ttk.Frame(self.notebook)
        self.notebook.add(gen_frame, text="üìÑ Generar Factura")
        
        # Scroll frame
        canvas = tk.Canvas(gen_frame, bg='white')
        scrollbar = ttk.Scrollbar(gen_frame, orient="vertical", command=canvas.yview)
        scrollable_frame = ttk.Frame(canvas)
        
        scrollable_frame.bind(
            "<Configure>",
            lambda e: canvas.configure(scrollregion=canvas.bbox("all"))
        )
        
        canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
        canvas.configure(yscrollcommand=scrollbar.set)
        
        # Datos de la factura
        self.create_invoice_form(scrollable_frame)
        
        canvas.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")
    
    def create_invoice_form(self, parent):
        """Crea el formulario de datos de factura"""
        # Informaci√≥n general
        info_frame = tk.LabelFrame(parent, text="üìã Informaci√≥n General", 
                                  font=('Segoe UI', 11, 'bold'), bg='white', padx=15, pady=15)
        info_frame.pack(fill=tk.X, padx=15, pady=10)
        
        # N√∫mero de factura
        tk.Label(info_frame, text="N√∫mero de Factura:", font=('Segoe UI', 10), bg='white').grid(row=0, column=0, sticky=tk.W, pady=5)
        self.invoice_number = tk.Entry(info_frame, font=('Segoe UI', 11), width=20)
        self.invoice_number.grid(row=0, column=1, sticky=tk.W, padx=(10, 0), pady=5)
        self.invoice_number.insert(0, self.get_next_invoice_number())
        
        # Tipo de documento
        tk.Label(info_frame, text="Tipo de Documento:", font=('Segoe UI', 10), bg='white').grid(row=0, column=2, sticky=tk.W, padx=(20, 0), pady=5)
        self.doc_type = ttk.Combobox(info_frame, values=["Factura Electr√≥nica", "Tiquete Electr√≥nico"], state="readonly", width=18)
        self.doc_type.grid(row=0, column=3, sticky=tk.W, padx=(10, 0), pady=5)
        self.doc_type.set("Factura Electr√≥nica")
        
        # Condici√≥n de venta
        tk.Label(info_frame, text="Condici√≥n de Venta:", font=('Segoe UI', 10), bg='white').grid(row=1, column=0, sticky=tk.W, pady=5)
        self.sale_condition = ttk.Combobox(info_frame, values=["Contado", "Cr√©dito"], state="readonly", width=18)
        self.sale_condition.grid(row=1, column=1, sticky=tk.W, padx=(10, 0), pady=5)
        self.sale_condition.set("Contado")
        
        # Medio de pago
        tk.Label(info_frame, text="Medio de Pago:", font=('Segoe UI', 10), bg='white').grid(row=1, column=2, sticky=tk.W, padx=(20, 0), pady=5)
        self.payment_method = ttk.Combobox(info_frame, values=["Efectivo", "Tarjeta", "SINPE M√≥vil", "Cheque"], state="readonly", width=18)
        self.payment_method.grid(row=1, column=3, sticky=tk.W, padx=(10, 0), pady=5)
        self.payment_method.set("Efectivo")
        
        # Datos del cliente
        client_frame = tk.LabelFrame(parent, text="üë§ Datos del Cliente", 
                                    font=('Segoe UI', 11, 'bold'), bg='white', padx=15, pady=15)
        client_frame.pack(fill=tk.X, padx=15, pady=10)
        
        # Nombre del cliente
        tk.Label(client_frame, text="Nombre Completo:", font=('Segoe UI', 10), bg='white').grid(row=0, column=0, sticky=tk.W, pady=5)
        self.client_name = tk.Entry(client_frame, font=('Segoe UI', 11), width=40)
        self.client_name.grid(row=0, column=1, columnspan=2, sticky=tk.W+tk.E, padx=(10, 0), pady=5)
        
        # C√©dula
        tk.Label(client_frame, text="C√©dula/ID:", font=('Segoe UI', 10), bg='white').grid(row=1, column=0, sticky=tk.W, pady=5)
        self.client_id = tk.Entry(client_frame, font=('Segoe UI', 11), width=20)
        self.client_id.grid(row=1, column=1, sticky=tk.W, padx=(10, 0), pady=5)
        
        # Tipo de identificaci√≥n
        tk.Label(client_frame, text="Tipo ID:", font=('Segoe UI', 10), bg='white').grid(row=1, column=2, sticky=tk.W, padx=(20, 0), pady=5)
        self.id_type = ttk.Combobox(client_frame, values=["F√≠sica", "Jur√≠dica", "DIMEX", "NITE"], state="readonly", width=15)
        self.id_type.grid(row=1, column=3, sticky=tk.W, padx=(10, 0), pady=5)
        self.id_type.set("F√≠sica")
        
        # Email y tel√©fono
        tk.Label(client_frame, text="Email:", font=('Segoe UI', 10), bg='white').grid(row=2, column=0, sticky=tk.W, pady=5)
        self.client_email = tk.Entry(client_frame, font=('Segoe UI', 11), width=30)
        self.client_email.grid(row=2, column=1, sticky=tk.W+tk.E, padx=(10, 0), pady=5)
        
        tk.Label(client_frame, text="Tel√©fono:", font=('Segoe UI', 10), bg='white').grid(row=2, column=2, sticky=tk.W, padx=(20, 0), pady=5)
        self.client_phone = tk.Entry(client_frame, font=('Segoe UI', 11), width=15)
        self.client_phone.grid(row=2, column=3, sticky=tk.W, padx=(10, 0), pady=5)
        
        # Direcci√≥n
        tk.Label(client_frame, text="Direcci√≥n:", font=('Segoe UI', 10), bg='white').grid(row=3, column=0, sticky=tk.W, pady=5)
        self.client_address = tk.Text(client_frame, font=('Segoe UI', 10), width=60, height=3)
        self.client_address.grid(row=3, column=1, columnspan=3, sticky=tk.W+tk.E, padx=(10, 0), pady=5)
        
        # Configurar grid weights
        client_frame.grid_columnconfigure(1, weight=1)
        
        # Productos de la venta
        products_frame = tk.LabelFrame(parent, text="üõí Productos de la Venta", 
                                      font=('Segoe UI', 11, 'bold'), bg='white', padx=15, pady=15)
        products_frame.pack(fill=tk.BOTH, expand=True, padx=15, pady=10)
        
        # Tabla de productos
        self.create_products_table(products_frame)
        
        # Totales
        totals_frame = tk.Frame(products_frame, bg='white')
        totals_frame.pack(fill=tk.X, pady=(10, 0))
        
        # Labels de totales
        totals_labels_frame = tk.Frame(totals_frame, bg='white')
        totals_labels_frame.pack(side=tk.RIGHT)
        
        self.subtotal_label = tk.Label(totals_labels_frame, text="Subtotal: ‚Ç°0.00", 
                                      font=('Segoe UI', 11), bg='white')
        self.subtotal_label.pack(anchor=tk.E)
        
        self.tax_label = tk.Label(totals_labels_frame, text="IVA (13%): ‚Ç°0.00", 
                                 font=('Segoe UI', 11), bg='white')
        self.tax_label.pack(anchor=tk.E)
        
        self.total_label = tk.Label(totals_labels_frame, text="TOTAL: ‚Ç°0.00", 
                                   font=('Segoe UI', 14, 'bold'), fg='#27ae60', bg='white')
        self.total_label.pack(anchor=tk.E, pady=(5, 0))
        
        # Botones de acci√≥n
        actions_frame = tk.Frame(parent, bg='white')
        actions_frame.pack(fill=tk.X, padx=15, pady=20)
        
        # Bot√≥n generar factura
        generate_btn = tk.Button(actions_frame, text="üìÑ Generar Factura Electr√≥nica", 
                                command=self.generate_electronic_invoice,
                                font=('Segoe UI', 12, 'bold'), bg='#27ae60', fg='white',
                                relief=tk.FLAT, padx=30, pady=12, cursor='hand2')
        generate_btn.pack(side=tk.LEFT, padx=(0, 10))
        
        # Bot√≥n vista previa
        preview_btn = tk.Button(actions_frame, text="üëÅÔ∏è Vista Previa PDF", 
                               command=self.preview_pdf,
                               font=('Segoe UI', 11), bg='#3498db', fg='white',
                               relief=tk.FLAT, padx=20, pady=10, cursor='hand2')
        preview_btn.pack(side=tk.LEFT, padx=(0, 10))
        
        # Bot√≥n limpiar
        clear_btn = tk.Button(actions_frame, text="üóëÔ∏è Limpiar", 
                             command=self.clear_form,
                             font=('Segoe UI', 11), bg='#95a5a6', fg='white',
                             relief=tk.FLAT, padx=20, pady=10, cursor='hand2')
        clear_btn.pack(side=tk.LEFT)
        
        # Cargar datos de venta si existen
        self.load_sale_data()
    
    def create_products_table(self, parent):
        """Crea la tabla de productos"""
        table_frame = tk.Frame(parent, bg='white')
        table_frame.pack(fill=tk.BOTH, expand=True)
        
        # Treeview
        columns = ('C√≥digo', 'Descripci√≥n', 'Cantidad', 'Precio', 'Total')
        self.products_tree = ttk.Treeview(table_frame, columns=columns, show='headings', height=8)
        
        # Configurar columnas
        self.products_tree.heading('C√≥digo', text='C√≥digo')
        self.products_tree.heading('Descripci√≥n', text='Descripci√≥n')
        self.products_tree.heading('Cantidad', text='Cant.')
        self.products_tree.heading('Precio', text='Precio Unit.')
        self.products_tree.heading('Total', text='Total')
        
        self.products_tree.column('C√≥digo', width=100)
        self.products_tree.column('Descripci√≥n', width=300)
        self.products_tree.column('Cantidad', width=80)
        self.products_tree.column('Precio', width=100)
        self.products_tree.column('Total', width=100)
        
        # Scrollbar
        products_scrollbar = ttk.Scrollbar(table_frame, orient=tk.VERTICAL, command=self.products_tree.yview)
        self.products_tree.configure(yscrollcommand=products_scrollbar.set)
        
        self.products_tree.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        products_scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
    
    def create_config_tab(self):
        """Pesta√±a de configuraci√≥n"""
        config_frame = ttk.Frame(self.notebook)
        self.notebook.add(config_frame, text="‚öôÔ∏è Configuraci√≥n")
        
        # Informaci√≥n de empresa
        company_frame = tk.LabelFrame(config_frame, text="üè¢ Datos de la Empresa", 
                                     font=('Segoe UI', 11, 'bold'), padx=15, pady=15)
        company_frame.pack(fill=tk.X, padx=15, pady=15)
        
        # Campos de empresa
        fields = [
            ("Nombre de la Empresa:", "company_name"),
            ("C√©dula Jur√≠dica:", "company_id"),
            ("Tel√©fono:", "company_phone"),
            ("Email:", "company_email"),
            ("Direcci√≥n:", "company_address")
        ]
        
        self.config_vars = {}
        for i, (label, var_name) in enumerate(fields):
            tk.Label(company_frame, text=label, font=('Segoe UI', 10)).grid(row=i, column=0, sticky=tk.W, pady=5)
            if var_name == "company_address":
                entry = tk.Text(company_frame, font=('Segoe UI', 10), width=50, height=3)
            else:
                entry = tk.Entry(company_frame, font=('Segoe UI', 11), width=50)
            entry.grid(row=i, column=1, sticky=tk.W+tk.E, padx=(10, 0), pady=5)
            self.config_vars[var_name] = entry
        
        company_frame.grid_columnconfigure(1, weight=1)
        
        # Configuraci√≥n t√©cnica
        tech_frame = tk.LabelFrame(config_frame, text="üîß Configuraci√≥n T√©cnica", 
                                  font=('Segoe UI', 11, 'bold'), padx=15, pady=15)
        tech_frame.pack(fill=tk.X, padx=15, pady=15)
        
        # Ambiente
        tk.Label(tech_frame, text="Ambiente:", font=('Segoe UI', 10)).grid(row=0, column=0, sticky=tk.W, pady=5)
        self.environment = ttk.Combobox(tech_frame, values=["Pruebas (Sandbox)", "Producci√≥n"], state="readonly", width=20)
        self.environment.grid(row=0, column=1, sticky=tk.W, padx=(10, 0), pady=5)
        self.environment.set("Pruebas (Sandbox)")
        
        # R√©gimen
        tk.Label(tech_frame, text="R√©gimen Tributario:", font=('Segoe UI', 10)).grid(row=1, column=0, sticky=tk.W, pady=5)
        self.tax_regime = ttk.Combobox(tech_frame, values=["Simplificado (Trimestral)", "Tradicional (Mensual)"], state="readonly", width=25)
        self.tax_regime.grid(row=1, column=1, sticky=tk.W, padx=(10, 0), pady=5)
        self.tax_regime.set("Simplificado (Trimestral)")
        
        # Botones de configuraci√≥n
        config_buttons_frame = tk.Frame(config_frame)
        config_buttons_frame.pack(fill=tk.X, padx=15, pady=20)
        
        save_config_btn = tk.Button(config_buttons_frame, text="üíæ Guardar Configuraci√≥n", 
                                   command=self.save_config,
                                   font=('Segoe UI', 11, 'bold'), bg='#27ae60', fg='white',
                                   relief=tk.FLAT, padx=20, pady=10, cursor='hand2')
        save_config_btn.pack(side=tk.LEFT, padx=(0, 10))
        
        test_connection_btn = tk.Button(config_buttons_frame, text="üîó Probar Conexi√≥n Hacienda", 
                                       command=self.test_hacienda_connection,
                                       font=('Segoe UI', 11), bg='#3498db', fg='white',
                                       relief=tk.FLAT, padx=20, pady=10, cursor='hand2')
        test_connection_btn.pack(side=tk.LEFT)
    
    def create_history_tab(self):
        """Pesta√±a de historial de facturas"""
        history_frame = ttk.Frame(self.notebook)
        self.notebook.add(history_frame, text="üìö Historial")
        
        # Filtros
        filters_frame = tk.Frame(history_frame)
        filters_frame.pack(fill=tk.X, padx=15, pady=15)
        
        tk.Label(filters_frame, text="Desde:", font=('Segoe UI', 10)).pack(side=tk.LEFT)
        self.date_from = tk.Entry(filters_frame, font=('Segoe UI', 10), width=12)
        self.date_from.pack(side=tk.LEFT, padx=(5, 15))
        self.date_from.insert(0, datetime.now().strftime("%d/%m/%Y"))
        
        tk.Label(filters_frame, text="Hasta:", font=('Segoe UI', 10)).pack(side=tk.LEFT)
        self.date_to = tk.Entry(filters_frame, font=('Segoe UI', 10), width=12)
        self.date_to.pack(side=tk.LEFT, padx=(5, 15))
        self.date_to.insert(0, datetime.now().strftime("%d/%m/%Y"))
        
        search_btn = tk.Button(filters_frame, text="üîç Buscar", 
                              command=self.search_invoices,
                              font=('Segoe UI', 10), bg='#3498db', fg='white',
                              relief=tk.FLAT, padx=15, pady=5, cursor='hand2')
        search_btn.pack(side=tk.LEFT, padx=5)
        
        # Tabla de historial
        history_table_frame = tk.Frame(history_frame)
        history_table_frame.pack(fill=tk.BOTH, expand=True, padx=15, pady=10)
        
        history_columns = ('Fecha', 'N√∫mero', 'Cliente', 'Total', 'Estado', 'Acciones')
        self.history_tree = ttk.Treeview(history_table_frame, columns=history_columns, show='headings', height=15)
        
        for col in history_columns:
            self.history_tree.heading(col, text=col)
            if col == 'Cliente':
                self.history_tree.column(col, width=200)
            elif col == 'Acciones':
                self.history_tree.column(col, width=150)
            else:
                self.history_tree.column(col, width=100)
        
        history_scrollbar = ttk.Scrollbar(history_table_frame, orient=tk.VERTICAL, command=self.history_tree.yview)
        self.history_tree.configure(yscrollcommand=history_scrollbar.set)
        
        self.history_tree.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        history_scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        
        # Cargar historial de ejemplo
        self.load_sample_history()
    
    def create_help_tab(self):
        """Pesta√±a de ayuda"""
        help_frame = ttk.Frame(self.notebook)
        self.notebook.add(help_frame, text="‚ùì Ayuda")
        
        help_text = tk.Text(help_frame, font=('Segoe UI', 10), wrap=tk.WORD, padx=20, pady=20)
        help_text.pack(fill=tk.BOTH, expand=True)
        
        help_content = """
SISTEMA DE FACTURACI√ìN ELECTR√ìNICA COSTA RICA
==============================================

üéØ CARACTER√çSTICAS PRINCIPALES:
‚Ä¢ Cumple con la normativa del Ministerio de Hacienda
‚Ä¢ Genera XML versi√≥n 4.4 autom√°ticamente  
‚Ä¢ Crea PDF profesional para el cliente
‚Ä¢ Env√≠o autom√°tico al ATV (Administrador Tributario Virtual)
‚Ä¢ Compatible con r√©gimen simplificado y tradicional

üìã COMO USAR EL SISTEMA:

1. CONFIGURACI√ìN INICIAL:
   ‚Ä¢ Vaya a la pesta√±a "Configuraci√≥n"
   ‚Ä¢ Complete los datos de su empresa
   ‚Ä¢ Configure el r√©gimen tributario (simplificado o tradicional)
   ‚Ä¢ Seleccione el ambiente (pruebas o producci√≥n)

2. GENERAR FACTURA:
   ‚Ä¢ Complete los datos del cliente (opcional para contado)
   ‚Ä¢ Los productos se cargan autom√°ticamente desde la venta
   ‚Ä¢ Revise los totales calculados
   ‚Ä¢ Haga clic en "Generar Factura Electr√≥nica"

3. R√âGIMEN SIMPLIFICADO:
   ‚Ä¢ Reportes cada 3 meses al Ministerio de Hacienda
   ‚Ä¢ Menor complejidad administrativa
   ‚Ä¢ Ideal para peque√±os negocios

4. R√âGIMEN TRADICIONAL:
   ‚Ä¢ Reportes mensuales
   ‚Ä¢ Mayor detalle contable
   ‚Ä¢ Para empresas medianas y grandes

üîß CONFIGURACI√ìN T√âCNICA:
‚Ä¢ Certificados digitales para firmar XML
‚Ä¢ Conexi√≥n segura con API de Hacienda
‚Ä¢ Respaldos autom√°ticos de facturas
‚Ä¢ Trazabilidad completa de documentos

üìû SOPORTE T√âCNICO:
‚Ä¢ Email: soporte@cajacentral.com
‚Ä¢ Tel√©fono: +506 2222-3333
‚Ä¢ WhatsApp: +506 8888-9999
‚Ä¢ Horario: Lunes a Viernes 8:00 AM - 6:00 PM

‚öñÔ∏è MARCO LEGAL:
‚Ä¢ Resoluci√≥n DGT-R-48-2016
‚Ä¢ Ley 8114 - Simplificaci√≥n Tributaria
‚Ä¢ Decreto Ejecutivo N¬∞ 41524-H

‚úÖ BENEFICIOS PARA CONTADORES:
‚Ä¢ Reportes en PDF listos para presentar
‚Ä¢ Exportaci√≥n a Excel y otros formatos
‚Ä¢ Conciliaci√≥n autom√°tica con sistemas contables
‚Ä¢ Trazabilidad completa de documentos fiscales

üöÄ ¬°Su negocio cumple autom√°ticamente con Hacienda!
        """
        
        help_text.insert(tk.END, help_content)
        help_text.config(state=tk.DISABLED)
    
    def get_next_invoice_number(self):
        """Obtiene el siguiente n√∫mero de factura"""
        # En producci√≥n, esto vendr√≠a de la base de datos
        return str(datetime.now().strftime("%Y%m%d") + "001")
    
    def load_sale_data(self):
        """Carga los datos de la venta actual"""
        if not self.venta_data:
            # Datos de ejemplo si no hay venta
            sample_products = [
                ("123456", "Producto de Ejemplo 1", "2", "‚Ç°15,000.00", "‚Ç°30,000.00"),
                ("789012", "Producto de Ejemplo 2", "1", "‚Ç°8,500.00", "‚Ç°8,500.00")
            ]
            
            for product in sample_products:
                self.products_tree.insert('', 'end', values=product)
        
        self.calculate_totals()
    
    def calculate_totals(self):
        """Calcula los totales de la factura"""
        subtotal = 0
        
        for item in self.products_tree.get_children():
            values = self.products_tree.item(item)['values']
            total_str = str(values[4]).replace('‚Ç°', '').replace(',', '')
            try:
                subtotal += float(total_str)
            except ValueError:
                continue
        
        tax = subtotal * 0.13  # IVA 13%
        total = subtotal + tax
        
        self.subtotal_label.config(text=f"Subtotal: ‚Ç°{subtotal:,.2f}")
        self.tax_label.config(text=f"IVA (13%): ‚Ç°{tax:,.2f}")
        self.total_label.config(text=f"TOTAL: ‚Ç°{total:,.2f}")
    
    def generate_electronic_invoice(self):
        """Genera la factura electr√≥nica"""
        if not FACTURACION_AVAILABLE:
            messagebox.showerror("Error", "Sistema de facturaci√≥n no disponible")
            return
        
        try:
            # Recopilar datos del formulario
            invoice_data = self.collect_invoice_data()
            
            # Validar datos
            if not self.validate_invoice_data(invoice_data):
                return
            
            # Mostrar progreso
            progress_window = self.show_progress_window()
            
            def generate_in_background():
                try:
                    # Generar XML
                    progress_window.update_progress("Generando XML v4.4...", 25)
                    xml_content = self.facturacion_system.crear_xml_factura(invoice_data)
                    
                    # Generar PDF
                    progress_window.update_progress("Creando PDF...", 50)
                    pdf_path = self.facturacion_system.generar_pdf_factura(invoice_data)
                    
                    # Guardar XML
                    progress_window.update_progress("Guardando archivos...", 75)
                    xml_path = self.save_xml_file(xml_content, invoice_data['numero'])
                    
                    # Enviar a Hacienda (opcional)
                    if messagebox.askyesno("Env√≠o a Hacienda", "¬øDesea enviar la factura al Ministerio de Hacienda ahora?"):
                        progress_window.update_progress("Enviando a Hacienda...", 90)
                        # result = self.facturacion_system.enviar_hacienda(xml_content, invoice_data['clave_numerica'])
                    
                    progress_window.update_progress("¬°Completado!", 100)
                    progress_window.close()
                    
                    # Mostrar resultado
                    self.show_generation_result(xml_path, pdf_path, invoice_data)
                    
                except Exception as e:
                    progress_window.close()
                    messagebox.showerror("Error", f"Error generando factura: {str(e)}")
            
            threading.Thread(target=generate_in_background, daemon=True).start()
            
        except Exception as e:
            messagebox.showerror("Error", f"Error en generaci√≥n: {str(e)}")
    
    def collect_invoice_data(self):
        """Recopila todos los datos de la factura"""
        # Recopilar productos
        lineas = []
        for item in self.products_tree.get_children():
            values = self.products_tree.item(item)['values']
            precio_str = str(values[3]).replace('‚Ç°', '').replace(',', '')
            
            linea = {
                'codigo': values[0],
                'descripcion': values[1],
                'cantidad': int(values[2]),
                'precio_unitario': float(precio_str),
                'descuento': 0.0,
                'unidad_medida': 'Unid',
                'codigo_impuesto': '01',
                'tarifa_impuesto': 13.00
            }
            lineas.append(linea)
        
        # Datos del cliente
        cliente_data = None
        if self.client_name.get().strip():
            cliente_data = {
                'nombre': self.client_name.get(),
                'cedula': self.client_id.get(),
                'tipo_identificacion': '01' if self.id_type.get() == 'F√≠sica' else '02',
                'telefono': self.client_phone.get(),
                'email': self.client_email.get(),
                'direccion': self.client_address.get('1.0', tk.END).strip(),
                'provincia': '1',
                'canton': '01',
                'distrito': '01'
            }
        
        return {
            'numero': self.invoice_number.get(),
            'codigo_actividad': '522001',  # Venta al por menor
            'condicion_venta': '01' if self.sale_condition.get() == 'Contado' else '02',
            'medio_pago': '01',  # Efectivo por defecto
            'cliente': cliente_data,
            'lineas': lineas
        }
    
    def validate_invoice_data(self, data):
        """Valida los datos de la factura"""
        if not data['numero']:
            messagebox.showerror("Error", "El n√∫mero de factura es requerido")
            return False
        
        if not data['lineas']:
            messagebox.showerror("Error", "Debe tener al menos un producto")
            return False
        
        return True
    
    def show_progress_window(self):
        """Muestra ventana de progreso"""
        progress_win = tk.Toplevel(self.window)
        progress_win.title("Generando Factura...")
        progress_win.geometry("400x150")
        progress_win.resizable(False, False)
        progress_win.transient(self.window)
        progress_win.grab_set()
        
        # Centrar
        progress_win.update_idletasks()
        x = (progress_win.winfo_screenwidth() // 2) - 200
        y = (progress_win.winfo_screenheight() // 2) - 75
        progress_win.geometry(f"400x150+{x}+{y}")
        
        # Contenido
        tk.Label(progress_win, text="‚è≥ Generando Factura Electr√≥nica", 
                font=('Segoe UI', 14, 'bold')).pack(pady=20)
        
        progress_bar = ttk.Progressbar(progress_win, length=300, mode='determinate')
        progress_bar.pack(pady=10)
        
        status_label = tk.Label(progress_win, text="Iniciando...", font=('Segoe UI', 10))
        status_label.pack(pady=5)
        
        def update_progress(text, value):
            status_label.config(text=text)
            progress_bar['value'] = value
            progress_win.update()
        
        def close():
            progress_win.destroy()
        
        progress_win.update_progress = update_progress
        progress_win.close = close
        
        return progress_win
    
    def save_xml_file(self, xml_content, invoice_number):
        """Guarda el archivo XML"""
        os.makedirs('facturas', exist_ok=True)
        filename = f"factura_{invoice_number}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xml"
        filepath = os.path.join('facturas', filename)
        
        with open(filepath, 'w', encoding='utf-8') as f:
            f.write(xml_content)
        
        return filepath
    
    def show_generation_result(self, xml_path, pdf_path, invoice_data):
        """Muestra el resultado de la generaci√≥n"""
        result_window = tk.Toplevel(self.window)
        result_window.title("‚úÖ Factura Generada Exitosamente")
        result_window.geometry("500x400")
        result_window.resizable(False, False)
        result_window.transient(self.window)
        result_window.grab_set()
        
        # Centrar
        result_window.update_idletasks()
        x = (result_window.winfo_screenwidth() // 2) - 250
        y = (result_window.winfo_screenheight() // 2) - 200
        result_window.geometry(f"500x400+{x}+{y}")
        
        # Contenido
        main_frame = tk.Frame(result_window, bg='white', padx=30, pady=30)
        main_frame.pack(fill=tk.BOTH, expand=True)
        
        # T√≠tulo
        tk.Label(main_frame, text="‚úÖ ¬°Factura Generada Exitosamente!", 
                font=('Segoe UI', 16, 'bold'), fg='#27ae60', bg='white').pack(pady=(0, 20))
        
        # Informaci√≥n
        info_frame = tk.Frame(main_frame, bg='white')
        info_frame.pack(fill=tk.X, pady=10)
        
        tk.Label(info_frame, text=f"üìÑ Factura No: {invoice_data['numero']}", 
                font=('Segoe UI', 12), bg='white').pack(anchor=tk.W, pady=5)
        tk.Label(info_frame, text=f"üìÖ Fecha: {datetime.now().strftime('%d/%m/%Y %H:%M')}", 
                font=('Segoe UI', 12), bg='white').pack(anchor=tk.W, pady=5)
        tk.Label(info_frame, text=f"üìÅ XML: {os.path.basename(xml_path)}", 
                font=('Segoe UI', 12), bg='white').pack(anchor=tk.W, pady=5)
        tk.Label(info_frame, text=f"üìÑ PDF: {os.path.basename(pdf_path)}", 
                font=('Segoe UI', 12), bg='white').pack(anchor=tk.W, pady=5)
        
        # Botones
        buttons_frame = tk.Frame(main_frame, bg='white')
        buttons_frame.pack(fill=tk.X, pady=20)
        
        def open_pdf():
            try:
                os.startfile(pdf_path)
            except:
                webbrowser.open(f"file://{os.path.abspath(pdf_path)}")
        
        def open_folder():
            try:
                os.startfile(os.path.dirname(pdf_path))
            except:
                pass
        
        pdf_btn = tk.Button(buttons_frame, text="üìÑ Abrir PDF", command=open_pdf,
                           font=('Segoe UI', 11, 'bold'), bg='#e74c3c', fg='white',
                           relief=tk.FLAT, padx=20, pady=10, cursor='hand2')
        pdf_btn.pack(side=tk.LEFT, padx=(0, 10))
        
        folder_btn = tk.Button(buttons_frame, text="üìÅ Abrir Carpeta", command=open_folder,
                              font=('Segoe UI', 11), bg='#3498db', fg='white',
                              relief=tk.FLAT, padx=20, pady=10, cursor='hand2')
        folder_btn.pack(side=tk.LEFT, padx=(0, 10))
        
        close_btn = tk.Button(buttons_frame, text="‚úÖ Cerrar", command=result_window.destroy,
                             font=('Segoe UI', 11), bg='#95a5a6', fg='white',
                             relief=tk.FLAT, padx=20, pady=10, cursor='hand2')
        close_btn.pack(side=tk.RIGHT)
    
    def export_pdf_v44(self):
        """Exporta factura directamente a PDF versi√≥n 4.4"""
        if not FACTURACION_AVAILABLE:
            messagebox.showerror("Error", "Sistema de facturaci√≥n no disponible")
            return
        
        try:
            # Recopilar datos del formulario
            invoice_data = self.collect_invoice_data()
            
            # Validar que hay productos
            if not invoice_data.get('lineas'):
                messagebox.showwarning("Advertencia", "‚ö†Ô∏è Agregue al menos un producto para generar el PDF")
                return
            
            # Mostrar di√°logo de progreso
            progress_window = self.show_progress_window()
            
            def generate_pdf_v44_background():
                try:
                    progress_window.update_progress("Preparando datos v4.4...", 20)
                    
                    # Preparar datos espec√≠ficos para v4.4
                    datos_v44 = {
                        'numero': invoice_data['numero'],
                        'fecha': datetime.now().strftime('%d/%m/%Y'),
                        'hora': datetime.now().strftime('%H:%M:%S'),
                        'empresa': {
                            'nombre': invoice_data.get('emisor', {}).get('nombre', 'Empresa S.A.'),
                            'cedula': invoice_data.get('emisor', {}).get('cedula', '3-101-123456'),
                            'telefono': '2222-3333',
                            'email': 'info@empresa.co.cr',
                            'direccion': 'San Jos√©, Costa Rica',
                            'actividad': 'Comercio al por menor'
                        },
                        'cliente': invoice_data.get('cliente', {
                            'nombre': 'Cliente General',
                            'cedula': 'N/A',
                            'telefono': 'N/A',
                            'email': 'N/A',
                            'direccion': 'N/A'
                        }),
                        'lineas': invoice_data['lineas'],
                        'tipo_documento': 'Factura Electr√≥nica',
                        'moneda': 'Colones (CRC)',
                        'clave_numerica': invoice_data.get('clave_numerica', 'CR' + '0' * 48),
                        'consecutivo': invoice_data.get('numero', '001-001-01-00000001'),
                        'condicion_venta': 'Contado',
                        'medio_pago': 'Efectivo',
                        'tipo_cambio': '590.00',
                        'regimen': 'R√©gimen Simplificado',
                        'resolucion_dgt': 'DGT-R-48-2016',
                        'vigencia_resolucion': '07/10/2016'
                    }
                    
                    progress_window.update_progress("Generando PDF v4.4...", 60)
                    
                    # Generar PDF v4.4
                    pdf_path = self.facturacion_system.generar_pdf_v44(datos_v44)
                    
                    progress_window.update_progress("¬°PDF v4.4 Completado!", 100)
                    progress_window.close()
                    
                    # Mostrar resultado espec√≠fico para v4.4
                    self.show_pdf_v44_result(pdf_path, datos_v44)
                    
                except Exception as e:
                    progress_window.close()
                    messagebox.showerror("Error PDF v4.4", f"Error generando PDF v4.4:\n{str(e)}")
            
            threading.Thread(target=generate_pdf_v44_background, daemon=True).start()
            
        except Exception as e:
            messagebox.showerror("Error", f"Error preparando PDF v4.4: {str(e)}")
    
    def show_pdf_v44_result(self, pdf_path, invoice_data):
        """Muestra el resultado de la generaci√≥n PDF v4.4"""
        result_window = tk.Toplevel(self.window)
        result_window.title("‚úÖ PDF v4.4 Generado")
        result_window.geometry("500x400")
        result_window.configure(bg='white')
        result_window.transient(self.window)
        result_window.grab_set()
        
        # Centrar ventana
        result_window.update_idletasks()
        x = (result_window.winfo_screenwidth() // 2) - (250)
        y = (result_window.winfo_screenheight() // 2) - (200)
        result_window.geometry(f"500x400+{x}+{y}")
        
        # Frame principal
        main_frame = tk.Frame(result_window, bg='white', padx=30, pady=30)
        main_frame.pack(fill=tk.BOTH, expand=True)
        
        # Icono de √©xito
        success_label = tk.Label(main_frame, text="‚úÖ", font=('Arial', 48), bg='white', fg='#27ae60')
        success_label.pack(pady=(0, 20))
        
        # T√≠tulo
        title_label = tk.Label(main_frame, text="PDF v4.4 Generado Exitosamente", 
                              font=('Segoe UI', 16, 'bold'), bg='white', fg='#2c3e50')
        title_label.pack(pady=(0, 20))
        
        # Informaci√≥n
        info_frame = tk.Frame(main_frame, bg='white')
        info_frame.pack(fill=tk.X, pady=10)
        
        tk.Label(info_frame, text=f"üìÑ Factura No: {invoice_data['numero']}", 
                font=('Segoe UI', 12), bg='white').pack(anchor=tk.W, pady=5)
        tk.Label(info_frame, text=f"üìÖ Fecha: {datetime.now().strftime('%d/%m/%Y %H:%M')}", 
                font=('Segoe UI', 12), bg='white').pack(anchor=tk.W, pady=5)
        tk.Label(info_frame, text=f"üìã Versi√≥n: 4.4 (Formato Contador)", 
                font=('Segoe UI', 12, 'bold'), bg='white', fg='#e74c3c').pack(anchor=tk.W, pady=5)
        tk.Label(info_frame, text=f"üìÑ Archivo: {os.path.basename(pdf_path)}", 
                font=('Segoe UI', 12), bg='white').pack(anchor=tk.W, pady=5)
        
        # Nota especial v4.4
        note_frame = tk.Frame(main_frame, bg='#f8f9fa', relief=tk.RAISED, bd=1)
        note_frame.pack(fill=tk.X, pady=15)
        
        tk.Label(note_frame, text="üìã Informaci√≥n v4.4", 
                font=('Segoe UI', 11, 'bold'), bg='#f8f9fa', fg='#2c3e50').pack(pady=(10, 5))
        tk.Label(note_frame, text="‚Ä¢ Formato especial para contadores y auditor√≠as", 
                font=('Segoe UI', 10), bg='#f8f9fa').pack(anchor=tk.W, padx=15)
        tk.Label(note_frame, text="‚Ä¢ Cumple normativas Ministerio de Hacienda CR", 
                font=('Segoe UI', 10), bg='#f8f9fa').pack(anchor=tk.W, padx=15)
        tk.Label(note_frame, text="‚Ä¢ Incluye informaci√≥n t√©cnica detallada", 
                font=('Segoe UI', 10), bg='#f8f9fa').pack(anchor=tk.W, padx=15, pady=(0, 10))
        
        # Botones
        buttons_frame = tk.Frame(main_frame, bg='white')
        buttons_frame.pack(fill=tk.X, pady=20)
        
        def open_pdf():
            try:
                os.startfile(pdf_path)
            except:
                webbrowser.open(f"file://{os.path.abspath(pdf_path)}")
        
        def open_folder():
            try:
                os.startfile(os.path.dirname(pdf_path))
            except:
                pass
        
        pdf_btn = tk.Button(buttons_frame, text="üìÑ Abrir PDF v4.4", command=open_pdf,
                           font=('Segoe UI', 12, 'bold'), bg='#e74c3c', fg='white',
                           relief=tk.FLAT, padx=25, pady=12, cursor='hand2')
        pdf_btn.pack(side=tk.LEFT, padx=(0, 10))
        
        folder_btn = tk.Button(buttons_frame, text="üìÅ Abrir Carpeta", command=open_folder,
                              font=('Segoe UI', 11), bg='#3498db', fg='white',
                              relief=tk.FLAT, padx=20, pady=12, cursor='hand2')
        folder_btn.pack(side=tk.LEFT, padx=(0, 10))
        
        close_btn = tk.Button(buttons_frame, text="‚úÖ Cerrar", command=result_window.destroy,
                             font=('Segoe UI', 11), bg='#95a5a6', fg='white',
                             relief=tk.FLAT, padx=20, pady=12, cursor='hand2')
        close_btn.pack(side=tk.RIGHT)

    def preview_pdf(self):
        """Vista previa del PDF"""
        messagebox.showinfo("Vista Previa", "Funci√≥n de vista previa en desarrollo")
    
    def clear_form(self):
        """Limpia el formulario"""
        if messagebox.askyesno("Limpiar", "¬øEst√° seguro que desea limpiar todos los datos?"):
            self.client_name.delete(0, tk.END)
            self.client_id.delete(0, tk.END)
            self.client_email.delete(0, tk.END)
            self.client_phone.delete(0, tk.END)
            self.client_address.delete('1.0', tk.END)
            
            for item in self.products_tree.get_children():
                self.products_tree.delete(item)
            
            self.calculate_totals()
    
    def save_config(self):
        """Guarda la configuraci√≥n"""
        messagebox.showinfo("Configuraci√≥n", "Configuraci√≥n guardada correctamente")
    
    def test_hacienda_connection(self):
        """Prueba la conexi√≥n con Hacienda"""
        messagebox.showinfo("Conexi√≥n", "Probando conexi√≥n con Ministerio de Hacienda...\n\n‚úÖ Conexi√≥n exitosa (modo prueba)")
    
    def search_invoices(self):
        """Busca facturas en el historial"""
        messagebox.showinfo("B√∫squeda", "Funci√≥n de b√∫squeda en desarrollo")
    
    def load_sample_history(self):
        """Carga historial de ejemplo"""
        sample_history = [
            ("25/07/2024", "20240725001", "Juan P√©rez", "‚Ç°45,650.00", "‚úÖ Aceptada", "Ver | Reimprimir"),
            ("24/07/2024", "20240724003", "Mar√≠a Gonz√°lez", "‚Ç°23,200.00", "‚úÖ Aceptada", "Ver | Reimprimir"),
            ("24/07/2024", "20240724002", "Carlos Rodr√≠guez", "‚Ç°67,800.00", "‚è≥ Pendiente", "Ver | Reenviar"),
            ("23/07/2024", "20240723001", "Ana Jim√©nez", "‚Ç°15,400.00", "‚úÖ Aceptada", "Ver | Reimprimir")
        ]
        
        for item in sample_history:
            self.history_tree.insert('', 'end', values=item)

# Funci√≥n para mostrar la ventana desde el sistema principal
def mostrar_facturacion_electronica(parent_window, venta_data=None):
    """Muestra la ventana de facturaci√≥n electr√≥nica"""
    try:
        FacturacionElectronicaUI(parent_window, venta_data)
    except Exception as e:
        messagebox.showerror("Error", f"Error abriendo facturaci√≥n electr√≥nica: {str(e)}")

if __name__ == "__main__":
    # Prueba independiente
    root = tk.Tk()
    root.withdraw()
    
    app = FacturacionElectronicaUI(root)
    root.mainloop()
